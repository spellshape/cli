package keeper

import (
	"context"

    "<%= ModulePath %>/x/<%= moduleName %>/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	clienttypes "github.com/cosmos/ibc-go/v6/modules/core/02-client/types"
)


func (k msgServer) Send<%= packetName.UpperCamel %>(goCtx context.Context,  msg *types.MsgSend<%= packetName.UpperCamel %>) (*types.MsgSend<%= packetName.UpperCamel %>Response, error) {
	ctx := sdk.UnwrapSDKContext(goCtx)

    // TODO: logic before transmitting the packet

    // Construct the packet
    var packet types.<%= packetName.UpperCamel %>PacketData
    <%= for (field) in fields { %>
    packet.<%= field.Name.UpperCamel %> = msg.<%= field.Name.UpperCamel %><% } %>

    // Transmit the packet
    _, err := k.Transmit<%= packetName.UpperCamel %>Packet(
        ctx,
        packet,
        msg.Port,
        msg.ChannelID,
        clienttypes.ZeroHeight(),
        msg.TimeoutTimestamp,
    )
    if err != nil {
        return nil, err
    }

	return &types.MsgSend<%= packetName.UpperCamel %>Response{}, nil
}
