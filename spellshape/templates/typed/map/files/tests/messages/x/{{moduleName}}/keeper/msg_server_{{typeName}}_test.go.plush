package keeper_test

import (
    "strconv"
	"testing"

	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
	"github.com/stretchr/testify/require"

    keepertest "<%= ModulePath %>/testutil/keeper"
    "<%= ModulePath %>/x/<%= ModuleName %>/keeper"
    "<%= ModulePath %>/x/<%= ModuleName %>/types"
)

// Prevent strconv unused error
var _ = strconv.IntSize

func Test<%= TypeName.UpperCamel %>MsgServerCreate(t *testing.T) {
	k, ctx := keepertest.<%= title(ModuleName) %>Keeper(t)
	srv := keeper.NewMsgServerImpl(*k)
	wctx := sdk.WrapSDKContext(ctx)
	<%= MsgSigner.LowerCamel %> := "A"
	for i := 0; i < 5; i++ {
		expected := &types.MsgCreate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
		    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueLoop() %>,
            <% } %>
		}
		_, err := srv.Create<%= TypeName.UpperCamel %>(wctx, expected)
		require.NoError(t, err)
		rst, found := k.Get<%= TypeName.UpperCamel %>(ctx,
		    <%= for (i, index) in Indexes { %>expected.<%= index.Name.UpperCamel %>,
            <% } %>
		)
		require.True(t, found)
		require.Equal(t, expected.<%= MsgSigner.UpperCamel %>, rst.<%= MsgSigner.UpperCamel %>)
	}
}

func Test<%= TypeName.UpperCamel %>MsgServerUpdate(t *testing.T) {
	<%= MsgSigner.LowerCamel %> := "A"

	for _, tc := range []struct {
		desc    string
		request *types.MsgUpdate<%= TypeName.UpperCamel %>
		err     error
	}{
		{
			desc:    "Completed",
			request: &types.MsgUpdate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueIndex() %>,
                <% } %>
			},
		},
		{
			desc:    "Unauthorized",
			request: &types.MsgUpdate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: "B",
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueIndex() %>,
                <% } %>
			},
			err:     sdkerrors.ErrUnauthorized,
		},
		{
			desc:    "KeyNotFound",
			request: &types.MsgUpdate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueInvalidIndex() %>,
                <% } %>
			},
			err:     sdkerrors.ErrKeyNotFound,
		},
	} {
		t.Run(tc.desc, func(t *testing.T) {
			k, ctx := keepertest.<%= title(ModuleName) %>Keeper(t)
			srv := keeper.NewMsgServerImpl(*k)
			wctx := sdk.WrapSDKContext(ctx)
			expected := &types.MsgCreate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueIndex() %>,
                <% } %>
			}
			_, err := srv.Create<%= TypeName.UpperCamel %>(wctx, expected)
			require.NoError(t, err)

			_, err = srv.Update<%= TypeName.UpperCamel %>(wctx, tc.request)
			if tc.err != nil {
				require.ErrorIs(t, err, tc.err)
			} else {
				require.NoError(t, err)
				rst, found := k.Get<%= TypeName.UpperCamel %>(ctx,
				    <%= for (i, index) in Indexes { %>expected.<%= index.Name.UpperCamel %>,
                    <% } %>
				)
				require.True(t, found)
				require.Equal(t, expected.<%= MsgSigner.UpperCamel %>, rst.<%= MsgSigner.UpperCamel %>)
			}
		})
	}
}

func Test<%= TypeName.UpperCamel %>MsgServerDelete(t *testing.T) {
	<%= MsgSigner.LowerCamel %> := "A"

	for _, tc := range []struct {
		desc    string
		request *types.MsgDelete<%= TypeName.UpperCamel %>
		err     error
	}{
		{
			desc:    "Completed",
			request: &types.MsgDelete<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueIndex() %>,
                <% } %>
			},
		},
		{
			desc:    "Unauthorized",
			request: &types.MsgDelete<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: "B",
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueIndex() %>,
                <% } %>
			},
			err:     sdkerrors.ErrUnauthorized,
		},
		{
			desc:    "KeyNotFound",
			request: &types.MsgDelete<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueInvalidIndex() %>,
                <% } %>
			},
			err:     sdkerrors.ErrKeyNotFound,
		},
	} {
		t.Run(tc.desc, func(t *testing.T) {
			k, ctx := keepertest.<%= title(ModuleName) %>Keeper(t)
			srv := keeper.NewMsgServerImpl(*k)
			wctx := sdk.WrapSDKContext(ctx)

			_, err := srv.Create<%= TypeName.UpperCamel %>(wctx, &types.MsgCreate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
			    <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.ValueIndex() %>,
                <% } %>
			})
			require.NoError(t, err)
			_, err = srv.Delete<%= TypeName.UpperCamel %>(wctx, tc.request)
			if tc.err != nil {
				require.ErrorIs(t, err, tc.err)
			} else {
				require.NoError(t, err)
				_, found := k.Get<%= TypeName.UpperCamel %>(ctx,
				    <%= for (i, index) in Indexes { %>tc.request.<%= index.Name.UpperCamel %>,
                    <% } %>
				)
				require.False(t, found)
			}
		})
	}
}
