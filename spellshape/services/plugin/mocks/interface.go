// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	plugin "github.com/spellshape/cli/spellshape/services/plugin"
)

// PluginInterface is an autogenerated mock type for the Interface type
type PluginInterface struct {
	mock.Mock
}

type PluginInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PluginInterface) EXPECT() *PluginInterface_Expecter {
	return &PluginInterface_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: cmd
func (_m *PluginInterface) Execute(cmd plugin.ExecutedCommand) error {
	ret := _m.Called(cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(plugin.ExecutedCommand) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type PluginInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - cmd plugin.ExecutedCommand
func (_e *PluginInterface_Expecter) Execute(cmd interface{}) *PluginInterface_Execute_Call {
	return &PluginInterface_Execute_Call{Call: _e.mock.On("Execute", cmd)}
}

func (_c *PluginInterface_Execute_Call) Run(run func(cmd plugin.ExecutedCommand)) *PluginInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(plugin.ExecutedCommand))
	})
	return _c
}

func (_c *PluginInterface_Execute_Call) Return(_a0 error) *PluginInterface_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExecuteHookCleanUp provides a mock function with given fields: hook
func (_m *PluginInterface) ExecuteHookCleanUp(hook plugin.ExecutedHook) error {
	ret := _m.Called(hook)

	var r0 error
	if rf, ok := ret.Get(0).(func(plugin.ExecutedHook) error); ok {
		r0 = rf(hook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginInterface_ExecuteHookCleanUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteHookCleanUp'
type PluginInterface_ExecuteHookCleanUp_Call struct {
	*mock.Call
}

// ExecuteHookCleanUp is a helper method to define mock.On call
//   - hook plugin.ExecutedHook
func (_e *PluginInterface_Expecter) ExecuteHookCleanUp(hook interface{}) *PluginInterface_ExecuteHookCleanUp_Call {
	return &PluginInterface_ExecuteHookCleanUp_Call{Call: _e.mock.On("ExecuteHookCleanUp", hook)}
}

func (_c *PluginInterface_ExecuteHookCleanUp_Call) Run(run func(hook plugin.ExecutedHook)) *PluginInterface_ExecuteHookCleanUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(plugin.ExecutedHook))
	})
	return _c
}

func (_c *PluginInterface_ExecuteHookCleanUp_Call) Return(_a0 error) *PluginInterface_ExecuteHookCleanUp_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExecuteHookPost provides a mock function with given fields: hook
func (_m *PluginInterface) ExecuteHookPost(hook plugin.ExecutedHook) error {
	ret := _m.Called(hook)

	var r0 error
	if rf, ok := ret.Get(0).(func(plugin.ExecutedHook) error); ok {
		r0 = rf(hook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginInterface_ExecuteHookPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteHookPost'
type PluginInterface_ExecuteHookPost_Call struct {
	*mock.Call
}

// ExecuteHookPost is a helper method to define mock.On call
//   - hook plugin.ExecutedHook
func (_e *PluginInterface_Expecter) ExecuteHookPost(hook interface{}) *PluginInterface_ExecuteHookPost_Call {
	return &PluginInterface_ExecuteHookPost_Call{Call: _e.mock.On("ExecuteHookPost", hook)}
}

func (_c *PluginInterface_ExecuteHookPost_Call) Run(run func(hook plugin.ExecutedHook)) *PluginInterface_ExecuteHookPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(plugin.ExecutedHook))
	})
	return _c
}

func (_c *PluginInterface_ExecuteHookPost_Call) Return(_a0 error) *PluginInterface_ExecuteHookPost_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExecuteHookPre provides a mock function with given fields: hook
func (_m *PluginInterface) ExecuteHookPre(hook plugin.ExecutedHook) error {
	ret := _m.Called(hook)

	var r0 error
	if rf, ok := ret.Get(0).(func(plugin.ExecutedHook) error); ok {
		r0 = rf(hook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginInterface_ExecuteHookPre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteHookPre'
type PluginInterface_ExecuteHookPre_Call struct {
	*mock.Call
}

// ExecuteHookPre is a helper method to define mock.On call
//   - hook plugin.ExecutedHook
func (_e *PluginInterface_Expecter) ExecuteHookPre(hook interface{}) *PluginInterface_ExecuteHookPre_Call {
	return &PluginInterface_ExecuteHookPre_Call{Call: _e.mock.On("ExecuteHookPre", hook)}
}

func (_c *PluginInterface_ExecuteHookPre_Call) Run(run func(hook plugin.ExecutedHook)) *PluginInterface_ExecuteHookPre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(plugin.ExecutedHook))
	})
	return _c
}

func (_c *PluginInterface_ExecuteHookPre_Call) Return(_a0 error) *PluginInterface_ExecuteHookPre_Call {
	_c.Call.Return(_a0)
	return _c
}

// Manifest provides a mock function with given fields:
func (_m *PluginInterface) Manifest() (plugin.Manifest, error) {
	ret := _m.Called()

	var r0 plugin.Manifest
	if rf, ok := ret.Get(0).(func() plugin.Manifest); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(plugin.Manifest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PluginInterface_Manifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Manifest'
type PluginInterface_Manifest_Call struct {
	*mock.Call
}

// Manifest is a helper method to define mock.On call
func (_e *PluginInterface_Expecter) Manifest() *PluginInterface_Manifest_Call {
	return &PluginInterface_Manifest_Call{Call: _e.mock.On("Manifest")}
}

func (_c *PluginInterface_Manifest_Call) Run(run func()) *PluginInterface_Manifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PluginInterface_Manifest_Call) Return(_a0 plugin.Manifest, _a1 error) *PluginInterface_Manifest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPluginInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPluginInterface creates a new instance of PluginInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPluginInterface(t mockConstructorTestingTNewPluginInterface) *PluginInterface {
	mock := &PluginInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
